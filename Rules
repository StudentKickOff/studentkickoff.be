#!/usr/bin/env ruby

# frozen_string_literal: true

preprocess do
  jaren.each do |item|
    jaar = item.identifier.without_ext.split('/').last.to_i
    item[:jaar] = jaar
  end

  artists.each do |artist|
    stage = artist.identifier.to_s.split('/')[-2]

    artist[:start] = DateTime.parse(artist[:start] + '+0200')
    artist[:end]   = DateTime.parse(artist[:end] + '+0200')
    artist[:title] = artist[:name]
    artist[:stage] = stage
  end

  crew_years.each do |year|
    @items.create('', { year: year }, "/crew/#{year}.erb")

    crew_of(year).each do |crew|
      crew[:year] = year
    end
  end

  def symbolize(x)
    case x
    when Hash
      x.symbolize_keys!
      x.each { |_, v| symbolize(v) }
    when Enumerable
      x.each { |v| symbolize(v) }
    end
  end

  # We want these items to populate the attributes as well
  @items.find_all('/**/*.yml').each do |i|
    i.update_attributes(symbolize(YAML.safe_load(i.raw_content)))
  end

  # Add extra attributes to our crewmembers
  @items['/**/leden.*'][:leden].each do |e|
    e[:email] = e[:naam].downcase.tr(' ', '.')
  end

  @items.find_all('/crew/*/*.md').each do |i|
    next unless i.attributes[:teamleden]

    i.attributes[:teamleden].map! do |e|
      e.merge!(crew_map[e[:naam]]) if crew_map[e[:naam]]

      # Don't infer photo name when provided
      unless e[:photo]
        compact_name = ActiveSupport::Inflector.transliterate(
          e[:naam].downcase.gsub(/[-' ]/, '')
        )
        e[:photo] = "#{compact_name}.jpg"
      end

      # Set the photo url dependent on year
      e[:photo] = "members/#{e[:photo]}"

      e
    end
  end
end

compile '/historiek/*.md' do
  filter :kramdown
end

compile '/crew/*/*.md' do
  filter :kramdown
  layout '/crew/teampagina.*'
  layout '/default.*'
  filter :erb
end

compile '/crew/*.erb' do
  filter :erb
  layout '/crew/overview.*'
  layout '/default.*'
end

compile '/**/*.md' do
  filter :kramdown
  layout '/default.*'
  filter :erb
end

compile '/artists/*/*.md' do
  filter :kramdown
  layout '/artist_page.*'
  layout '/default.*'
  filter :erb
end

compile '/artists/*/*.md', rep: :json do
  filter :kramdown
  filter :strip_html
  filter :json, item.attributes.merge(
    image: "https://studentkickoff.be/assets/images/artists/#{item[:image]}"
  )
end

ignore '/studentvillage/*.md'
compile '/studentvillage/*.md', rep: :json do
  filter :kramdown
  filter :strip_html

  attrs = item.attributes.dup
  attrs[:logo] &&= "https://studentkickoff.be/assets/images/studentvillage/#{attrs[:logo]}"

  filter :json, attrs
end

compile '/**/*.erb' do
  layout '/default.*'
  filter :erb
end

compile '/**/*.json' do
  filter :erb
  write item.identifier.to_s
end

compile '/assets/images/gallery/*.{jpg,png}', rep: :thumbnail do
  filter :img_resize, size: '150x150'
  filter :img_compress
  write "#{item.identifier.without_ext}_thumbnail.jpg"
end

compile '/assets/images/org/*/members/*.{jpg,png}' do
  filter :img_resize, size: '300x300'
end

compile '/assets/images/org/*/team*.{jpg,png}' do
  filter :img_resize, size: '1920x1080'
end

compile '/assets/images/**/*.{jpg,png}' do
  # filter :img_compress
end

# Empty route block prevents item from being written out
route '/historiek/*.md' do; end

route '/artists/*/*.md' do
  split_path = @item.identifier.without_ext.split('/')
  split_path.delete_at(-2)

  "#{split_path.join('/')}/index.html"
end

route '/**/*.{erb,html,md}' do
  if item.identifier =~ '/index.*'
    '/index.html'
  else
    "#{item.identifier.without_ext}/index.html"
  end
end

ignore '/assets/stylesheets/includes/**/*'
compile '/**/*.scss' do
  filter :sass, syntax: :scss
  filter :autoprefixer

  write ext: 'css'
end

compile '/**/*.coffee' do
  filter :coffeescript

  write ext: 'js'
end

passthrough '/assets/**/*'
passthrough '/crew/leden.yml'
passthrough '/signature/logo2013.png'

passthrough '**/*'

layout '/**/*', :erb
